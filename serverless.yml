service: db

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: beta
  memorySize: ${self:custom.memSize.${self:custom.stage}}
  profile: ams-backend
  versionFunctions: false
  environment:
    STAGE: ${self:custom.stage}
    AWSREGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - secretsmanager:*
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - rds-data:*
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: "*"

package:
  exclude:
    - package-lock.json
    - package.json

plugins:
  - serverless-pseudo-parameters

custom:
  stage: ${opt:stage, self:provider.stage}
  memSize:
    dev: 128
    beta: 512
  throughput:
    dev: 5
    beta: 10
  #es_volume_size:
    #dev: 10
    #beta: 20
   
  #es_instance_count:
   # dev: 1
    #beta: 5
    

resources:
  Resources: 
    VPC:
      Type: 'AWS::EC2::VPC'
      Properties:
        CidrBlock: !Sub '10.0.0.0/16'
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
    InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
      Properties:
        Tags:
        - Key: touchParkTestIG
          Value: !Sub '10.0.0.0/16'
    VPCGatewayAttachment:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway
    SubnetAPublic:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [0, !GetAZs '']
        CidrBlock: !Sub '10.0.5.0/24'
        MapPublicIpOnLaunch: true
        VpcId: !Ref VPC
    SubnetBPublic:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [1, !GetAZs '']
        CidrBlock: !Sub '10.0.6.0/24'
        MapPublicIpOnLaunch: true
        VpcId: !Ref VPC
    SubnetCPublic:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [2, !GetAZs '']
        CidrBlock: !Sub '10.0.8.0/24'
        MapPublicIpOnLaunch: true
        VpcId: !Ref VPC
    SubnetAPrivate:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [2, !GetAZs '']
        CidrBlock: !Sub '10.0.9.0/24'
        VpcId: !Ref VPC
    
    SubnetBPrivate:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [1, !GetAZs '']
        CidrBlock: !Sub '10.0.12.0/24'
        VpcId: !Ref VPC
    SubnetCPrivate:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [0, !GetAZs '']
        CidrBlock: !Sub '10.0.14.0/24'
        VpcId: !Ref VPC
    RouteTableAPublic:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
    RouteTableAPrivate:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
    RouteTableAssociationAPublicSubnetA:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetAPublic
        RouteTableId: !Ref RouteTableAPublic
       
    RouteTableAssociationAPublicSubnetB:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetBPublic
        RouteTableId: !Ref RouteTableAPublic
    RouteTableAssociationAPublicSubnetC:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetCPublic
        RouteTableId: !Ref RouteTableAPublic
        
        
     
    RouteTableAssociationAPrivateSubnetA:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetAPrivate
        RouteTableId: !Ref RouteTableAPrivate
       
    RouteTableAssociationAPrivateSubnetB:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetBPrivate
        RouteTableId: !Ref RouteTableAPrivate
    RouteTableAssociationAPrivateSubnetC:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetCPrivate
        RouteTableId: !Ref RouteTableAPrivate
    
    
    
    
    
    RouteTablePublicAInternetRoute:
      Type: 'AWS::EC2::Route'
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref RouteTableAPublic
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref InternetGateway
    EIPA:
      Type: 'AWS::EC2::EIP'
      Properties:
        Domain: vpc
    NatGatewayA:
      Type: 'AWS::EC2::NatGateway'
      Properties:
        AllocationId: !GetAtt 'EIPA.AllocationId'
        SubnetId: !Ref SubnetAPublic
    RouteA:
      Type: 'AWS::EC2::Route'
      Properties:
        RouteTableId: !Ref RouteTableAPrivate
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NatGatewayA
    ServerlessPublicSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
          
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '22'
          ToPort: '22'
          
        - IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          FromPort: '-1'
          ToPort: '-1'
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
          
    
        
    ServerlessPrivateSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Memcached Cluster & RDS Instance
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '3306'
            ToPort: '3306'
            SourceSecurityGroupId:
              Ref: ServerlessPublicSecurityGroup
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
    
        
        
        
            
    myDBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup    
      Properties: 
        DBSubnetGroupDescription: DB Subnet Group Created
        SubnetIds: 
          - Ref: SubnetAPublic
          #- Ref: SubnetBPublic
          #- Ref: SubnetCPublic
          - Ref: SubnetAPrivate
          - Ref: SubnetBPrivate
          #- Ref: SubnetCPrivate
       
    
    BastionTestec2:
       Type: AWS::EC2::Instance
       #DependsOn: ServerlessPublicSecurityGroup
       Properties:
         DisableApiTermination: false
         ImageId: ami-0565af6e282977273
         InstanceType: t2.nano
         KeyName: bastiontouchec2
         Monitoring: false
         NetworkInterfaces: 
         - AssociatePublicIpAddress: "true"
           DeviceIndex: "0"
           GroupSet: 
           - Ref: "ServerlessPublicSecurityGroup"
           SubnetId: !Ref SubnetAPublic
           #SecurityGroupIds:
           #- Ref: ServerlessPublicSecurityGroup
        #UserData: Base64 "apt-get install mysql-client -y"

    # BastionSecurityGroup:
    #   Type: AWS::EC2::SecurityGroup
    #   Properties:
    #     GroupDescription: "Security Group for Aurora Serverless DB Cluster's Bastion Host"
    #     SecurityGroupEgress:
    #       - CidrIp: 0.0.0.0/0
    #         FromPort: -1
    #         ToPort: -1
    #         IpProtocol: -1
    #       # - DestinationSecurityGroupId:
    #       #     Ref: VpcSecurityGroupId
    #       #   FromPort: 3306
    #       #   ToPort: 3306
    #       #   IpProtocol: tcp
    #     SecurityGroupIngress: []

    MasterUserSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Description: "DB Cluster's Master User Password secret"
        # SecretString: String
        GenerateSecretString:
          SecretStringTemplate: '{"username": "root"}'
          GenerateStringKey: "password"
          PasswordLength: 10
          ExcludeCharacters: '"@/\'
        Name: MasterUserSecretAurora-${self:custom.stage}

    DBCluster:
      Type: AWS::RDS::DBCluster
      DependsOn: MasterUserSecret
      Properties:
        Engine: aurora
        EngineMode: serverless
        EngineVersion: 5.6
        DatabaseName: mysqlauroradbtouchtest
        DBSubnetGroupName: 
          Ref: myDBSubnetGroup
        DBClusterIdentifier: mysqlauroradb-${self:custom.stage}
        MasterUsername:
          Fn::Join:
            [
              "",
              [
                "{{resolve:secretsmanager:",
                Ref: MasterUserSecret,
                ":SecretString:username}}",
              ],
            ]
        MasterUserPassword:
          Fn::Join:
            [
              "",
              [
                "{{resolve:secretsmanager:",
                Ref: MasterUserSecret,
                ":SecretString:password}}",
              ],
            ]
        BackupRetentionPeriod: 35
        DeletionProtection: false
        VpcSecurityGroupIds: 
        - !Ref ServerlessPrivateSecurityGroup
        
        #!FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", "SecurityGroups"]
        #? "Fn::GetAtt"
        #:        
       # - ServerlessPrivateSecurityGroup

    SecretTargetAttachment:
      Type: AWS::SecretsManager::SecretTargetAttachment
      DependsOn: DBCluster
      Properties:
        TargetType: AWS::RDS::DBCluster
        SecretId:
          Ref: MasterUserSecret
        TargetId:
          Ref: DBCluster

  Outputs:

    DBClusterIdentifier:
      Description: "Aurora Serverless DB cluster identifier"
      Value:
        Ref: DBCluster
      Export:
        Name: DBClusterIdentifier-${self:custom.stage}

    DBName:
      Description: "Database name"
      Value: mysqlauroradbtouchtest
      Export:
        Name: DBName-${self:custom.stage}

    DBClusterArn:
      Description: "Aurora Serverless DB cluster ARN"
      Value:
        Fn::Join:
          [
            ":",
            [
              "arn:aws:rds",
              "#{AWS::Region}",
              "#{AWS::AccountId}",
              "cluster",
              Ref: DBCluster,
            ],
          ]
      Export:
        Name: DBCluster-${self:custom.stage}

    MasterUserSecret:
      Description: "MasterUserSecret Arn"
      Value:
        Ref: MasterUserSecret
      Export:
        Name: MasterUserSecretAurora-${self:custom.stage}
